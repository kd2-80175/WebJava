package com.sunbeam.daos;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.sunbeam.pojos.Reviews;
import com.sunbeam.utils.DateTimeUtil;

public class ReviewDaoImpl extends Dao implements ReviewDao {
	public ReviewDaoImpl() throws Exception {
		super();
		// TODO Auto-generated constructor stub
	}

	

	public List<Reviews> findAll() throws Exception {
		List<Reviews> list = new ArrayList<Reviews>();
		String sql = "SELECT * FROM reviews ORDER BY modified DESC";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int userId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlToUtilDate(rs.getTimestamp("modified"));
					Reviews r = new Reviews(id, movieId, review, userId, rating, modified);
					list.add(r);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	public List<Reviews> findByUserId(int userId) throws Exception {
		List<Reviews> list = new ArrayList<Reviews>();
		String sql = "SELECT * FROM reviews WHERE user_id=? ORDER BY modified DESC";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, userId);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					int id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int usrId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlToUtilDate(rs.getTimestamp("modified"));
					Reviews r = new Reviews(id, movieId, review, usrId, rating, modified);
					list.add(r);
				}
			} // rs.close();
		} // stmt.close();
		return list;
	}
	
	

	public Reviews findById(int id) throws Exception {
		String sql = "SELECT * FROM reviews WHERE id=?";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, id);
			try(ResultSet rs = stmt.executeQuery()) {
				while(rs.next()) {
					id = rs.getInt("id");
					int movieId = rs.getInt("movie_id");
					String review = rs.getString("review");
					int rating = rs.getInt("rating");
					int usrId = rs.getInt("user_id");
					Date modified = DateTimeUtil.sqlToUtilDate(rs.getTimestamp("modified"));
					Reviews r = new Reviews(id, movieId, review, usrId, rating, modified);
					return r;
				}
			} // rs.close();
		} // stmt.close();
		return null;
	}



	@Override
	public int save(Reviews r) throws Exception {
		String sql = "INSERT INTO reviews(id, movie_id, review, rating, user_id, modified) VALUES(default, ?, ?, ?, ?, ?)";
		try(PreparedStatement stmt = con.prepareStatement(sql)) {
			stmt.setInt(1, r.getMovieid());
			stmt.setString(2, r.getReview());
			stmt.setInt(3, r.getRating());
			stmt.setInt(4, r.getUserid());
			stmt.setTimestamp(5, DateTimeUtil.sqlToUtilDate(r.getModified()));
			int count = stmt.executeUpdate();
			return count;
		} //st
	}



	@Override
	public int update(Reviews r) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}



	@Override
	public List<Reviews> getSharedWithUser(int userId) throws Exception {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public int deleteById(int reviewId) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}



	@Override
	public int shareReview(int reviewId, int userId) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

	
	

	

	






	
}
